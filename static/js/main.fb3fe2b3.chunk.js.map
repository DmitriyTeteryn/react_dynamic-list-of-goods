{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","style","color","name","id","getAll","fetch","then","response","json","GoodsType","get5First","sort","a","b","localeCompare","slice","getRedGoods","filter","App","useState","visibleGoods","setVisibleGoods","None","selectedGoods","setSelectedGoods","isLoading","setIsLoading","errorMessage","setErrorMessage","loadGoods","apiCallBack","type","goodsFromServer","catch","error","finally","className","onClick","All","FirstFive","Red","ReactDOM","render","document","getElementById"],"mappings":"wMAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CAAEC,MAAOF,EAAKE,OAHvB,SAKGF,EAAKG,MAJDH,EAAKI,UCNX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,ICJFC,EDIQC,EAAY,WACvB,OAAON,IAASE,MAAK,SAAAT,GAAK,OACxBA,EAAMc,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEV,KAAKY,cAAcD,EAAEX,SAAOa,MAAM,EAAG,OAInDC,EAAc,WACzB,OAAOZ,IACJE,MAAK,SAAAT,GAAK,OAAIA,EAAMoB,QAAO,SAAAlB,GAAI,MAAmB,QAAfA,EAAKE,c,SCZxCQ,O,eAAAA,I,aAAAA,I,yBAAAA,I,cAAAA,M,KAOE,IAAMS,EAAU,WACrB,MAAwCC,mBAAiB,IAAzD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA0CF,mBAASV,EAAUa,MAA7D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAwCP,mBAAS,IAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAEMC,EAAY,SAACC,EAAoCC,GACrDH,EAAgB,IAEZL,IAAkBQ,IACpBL,GAAa,GACbI,IACGxB,MAAK,SAAA0B,GAAe,OAAIX,EAAgBW,MACxCC,OAAM,SAAAC,GAAK,OAAIN,EAAgBM,MAC/BC,SAAQ,kBAAMT,GAAa,MAC9BF,EAAiBO,KAIrB,OACE,sBAAKK,UAAU,MAAf,UACE,uDAEA,wBACEL,KAAK,SACL,UAAQ,aACRM,QAAS,kBAAMR,EAAUzB,EAAQK,EAAU6B,MAH7C,4BAQA,wBACEP,KAAK,SACL,UAAQ,oBACRM,QAAS,kBAAMR,EAAUnB,EAAWD,EAAU8B,YAHhD,gCAQA,wBACER,KAAK,SACL,UAAQ,aACRM,QAAS,kBAAMR,EAAUb,EAAaP,EAAU+B,MAHlD,6BAQEf,IAAcE,GAAiB,cAAC,EAAD,CAAW9B,MAAOuB,IAClDK,GAAc,6CACdE,GAAiB,+CAAgBA,SC3DxCc,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.fb3fe2b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const get5First = () => {\n  return getAll().then(goods => (\n    goods.sort((a, b) => a.name.localeCompare(b.name)).slice(0, 5)\n  ));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red'));\n};\n","import { FC, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\n\nenum GoodsType {\n  None,\n  All,\n  FirstFive,\n  Red,\n}\n\nexport const App: FC = () => {\n  const [visibleGoods, setVisibleGoods] = useState<Good[]>([]);\n  const [selectedGoods, setSelectedGoods] = useState(GoodsType.None);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const loadGoods = (apiCallBack: () => Promise<Good[]>, type: GoodsType) => {\n    setErrorMessage('');\n\n    if (selectedGoods !== type) {\n      setIsLoading(true);\n      apiCallBack()\n        .then(goodsFromServer => setVisibleGoods(goodsFromServer))\n        .catch(error => setErrorMessage(error))\n        .finally(() => setIsLoading(false));\n      setSelectedGoods(type);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={() => loadGoods(getAll, GoodsType.All)}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={() => loadGoods(get5First, GoodsType.FirstFive)}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={() => loadGoods(getRedGoods, GoodsType.Red)}\n      >\n        Load red goods\n      </button>\n\n      {!isLoading && !errorMessage && (<GoodsList goods={visibleGoods} />)}\n      {isLoading && (<div>Loading...</div>)}\n      {errorMessage && (<div>{`Error: ${errorMessage}`}</div>)}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}